nelmio_api_doc:
    documentation:
        info:
            title: Notes
            description: A Vue + Symfony sample application for managing one's notes.
            version: 0.0.1
            license: {name: MIT}

        security:
            - TokenAuth: []

        paths:
            /api/user:
                get:
                    summary: Get current user
                    description: 'Gets the data of the currently logged in user.'
                    tags: [User]
                    responses:
                        '200':
                            description: 'If the data of the current user is successfully returned.'
                            content:
                                application/json:
                                    schema: {$ref: '#/components/schemas/UserResponse'}
                        '401': {$ref: '#/components/responses/Unauthorized'}
                        '500': {$ref: '#/components/responses/InternalServerError'}

            /api/user/login:
                post:
                    summary: Login
                    description: 'Logs in a user given its credentials.'
                    tags: [User]
                    requestBody:
                        required: true
                        content:
                            application/json:
                                schema:
                                    type: object
                                    properties:
                                        username: {type: string}
                                        password:
                                            type: string
                                            format: password
                    responses:
                        '200':
                            description: 'If the user successfully logged in.'
                            content:
                                application/json:
                                    schema: {$ref: '#/components/schemas/UserResponse'}
                        '400':
                            description: 'If the data sent for login is malformed (e.g. bad JSON) or invalid (e.g. username is blank).'
                            content:
                                application/json:
                                    schema: {$ref: '#/components/schemas/ValidationErrorResponse'}
                        '401':
                            description: 'If the login was unsuccessful.'
                            content:
                                application/json:
                                    schema: {$ref: '#/components/schemas/ErrorResponse'}
                        '500': {$ref: '#/components/responses/InternalServerError'}

            /api/user/logout:
                delete:
                    summary: Logout
                    description: 'Logs out the current user.'
                    tags: [User]
                    responses:
                        '204':
                            description: 'If the current user was successfully logged out.'
                        '500': {$ref: '#/components/responses/InternalServerError'}

        components:
            securitySchemes:
                TokenAuth:
                    type: apiKey
                    in: header
                    name: Authorization

            responses:
                Unauthorized:
                    description: 'If the request is anonymous.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/schemas/ErrorResponse'}

                InternalServerError:
                    description: 'If an internal error occurred.'
                    content:
                        application/json:
                            schema: {$ref: '#/components/schemas/ErrorResponse'}

            schemas:
                UserResponse:
                    type: object
                    properties:
                        id: {type: integer}
                        username: {type: string}
                        currentToken:
                            type: object
                            properties:
                                token: {type: string}
                                expiresAt:
                                    type: string
                                    format: date-time

                ErrorResponse:
                    type: object
                    properties:
                        type: {type: string}
                        title: {type: string}
                        status: {type: integer}
                        detail: {type: string}

                ValidationErrorResponse:
                    type: object
                    properties:
                        type: {type: string}
                        title: {type: string}
                        status: {type: integer}
                        detail: {type: string}
                        violations:
                            type: array
                            items:
                                type: object
                                properties:
                                    propertyPath: {type: string}
                                    title: {type: string}
                                    parameters:
                                        type: array
                                        items: {type: string}
                                    type: {type: string}
                                    payload: {type: object}

    areas:
        path_patterns:
            - ^/api(?!/doc$)
